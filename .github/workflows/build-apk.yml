name: ⚡ Ultra Fast Flutter APK Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 3  # Prevent long runs

    steps:
      # ✅ 1. Checkout source code (fast)
      - name: 🚀 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      # ✅ 2. Cache Flutter dependencies + Gradle cache
      - name: 🔥 Cache Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            ~/.gradle/caches
            .dart_tool/
          key: ultra-cache-${{ runner.os }}-${{ hashFiles('pubspec.lock') }}
          restore-keys: |
            ultra-cache-${{ runner.os }}-

      # ✅ 3. Setup Flutter (auto-cached by the action)
      - name: ⚡ Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.0'
          cache: true

      # ✅ 4. Install dependencies (safe & offline-aware)
      - name: 📦 Get Packages
        run: |
          flutter pub get --offline || flutter pub get

      # ✅ 5. Build lightweight APK (only armeabi-v7a)
      - name: 🏗️ Build Release APK
        run: |
          flutter build apk \
            --release \
            --target-platform android-arm \
            --split-per-abi \
            --no-track-widget-creation \
            --build-name=1.0.0 \
            --build-number=1

      # ✅ 6. Upload generated APK artifact
      - name: 📤 Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: app-armeabi-v7a
          path: build/app/outputs/flutter-apk/app-armeabi-v7a-release.apk
          retention-days: 1

      # ✅ 7. Simple success message
      - name: 🎯 Build Success
        if: success()
        run: |
          echo "✅ Build completed successfully!"
          echo "📱 Download from: Actions → Artifacts → app-armeabi-v7a.zip"